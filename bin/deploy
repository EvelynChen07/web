#!/usr/bin/env bash

#
# Deploy UPchieve. By default, deploys `master` on both web and server repos.
#
# Usage:
#   deploy -w [WEB_BRANCH] -s [SERVER_BRANCH]
#
# Examples:
#
#   To deploy `server/feature_branch` and `web/master`:
#
#        deploy -s feature_branch
#
#   To deploy `web/feature_branch_1` and `server/feature_branch_2`:
#
#        deploy -w master -s feature_branch
#

# switch to projct root directory
root_dir=$(git rev-parse --show-toplevel)
cd "$root_dir" || exit 1

# load utility functions
# shellcheck source=./utilities.sh
. "${root_dir}/bin/utilities.sh"

BUILD_TIMESTAMP="$(date +'%s')"

usage() {
  grep '^#' < "$0" | tail -n +2 | head -15 | cut -c 3-
}

ensure_var_is_set() {
  local env_var_name="${1}"
  local env_var_val="${!env_var_name}"
  step "$env_var_name: $env_var_val"

  if [[ -z "$env_var_val" ]]; then
    msg="Error: $env_var_name is unset"
    echo "$msg"
    notify_failure "$msg"
    exit 1
  fi
}

slack_notify() {
  # Send a notification to the UPchieve #tech-chatops room.
  curl -X POST \
       -H 'Content-type: application/json' \
       --data "{\"text\": \"$1\"}" \
       "$SLACK_DEPLOY_WEBHOOK_URL"
}

switch_to_branch_and_setup() {
  # For the current Git repo, reset to clean state, clean up local branches,
  # switch to the given branch and install dependencies using npm.
  local branch_name="${1}"
  local available_branches
  local local_branches

  step "git fetch --prune --all"
  git fetch --prune --all

  step "git reset --hard"
  git reset --hard

  step "git clean -df"
  git clean -df

  step "git checkout master"
  git checkout master

  step "git pull --rebase"
  git pull --rebase

  local_branches="$(git branch | grep --invert-match master | sed -E 's/^[\* ]+//')"
  if [[ -n "$local_branches" ]]; then
    for branch in $local_branches; do
      step "git branch -D $branch"
      git branch -D "$branch"
    done
  fi

  available_branches="$(git branch --all | grep remotes/origin | awk '{ print $1 }' | tr '\n' ' ')"
  if [[ ! $available_branches =~ $branch_name ]]; then
    msg="Error: '$branch_name' does not exist at remote 'origin'."
    echo "$msg"
    notify_failure "$msg"
    exit 1
  fi

  if [[ "${branch_name}" != "master" ]]; then
    step "git checkout -b ${branch_name} origin/${branch_name}"
    git checkout -b "${branch_name}" "origin/${branch_name}"
  fi

  step "npm install"
  npm install
}

deploy_repos() {
  slack_notify "[Build $BUILD_TIMESTAMP] Deploying web/$WEB_BRANCH and server/$SERVER_BRANCH to $UPCHIEVE_ENV... (triggered by ${BUILD_USER})"

  # Deploy the requested branches of the server and web client repositories.
  slack_notify "[Build $BUILD_TIMESTAMP] Flushing logs..."
  pm2 flush

  slack_notify "[Build $BUILD_TIMESTAMP] Checking ENV vars..."
  hrule
  step "Checking env vars..."
  ensure_var_is_set "UPCHIEVE_ENV"
  ensure_var_is_set "NODE_ENV"
  ensure_var_is_set "SOCKET_ADDRESS"
  ensure_var_is_set "SERVER_ROOT"
  ensure_var_is_set "SLACK_DEPLOY_WEBHOOK_URL"

  slack_notify "[Build $BUILD_TIMESTAMP] Deploying web/$WEB_BRANCH to $UPCHIEVE_ENV..."
  hrule
  step "Setting up web client repo..."
  cd ../web
  switch_to_branch_and_setup "$WEB_BRANCH"
  if [[ "${NODE_ENV}" == "production" ]]; then
    step "Building web client for production..."
    npm run build
  else
    step "Building web client for staging..."
    npm run build:staging
  fi
  

  slack_notify "[Build $BUILD_TIMESTAMP] Deploying server/$SERVER_BRANCH to $UPCHIEVE_ENV..."
  hrule
  step "Setting up server repo..."
  cd ../server
  switch_to_branch_and_setup "$SERVER_BRANCH"

  slack_notify "[Build $BUILD_TIMESTAMP] Restarting server..."
  hrule
  step "Restarting server..."
  pm2 restart main --time
  pm2 restart worker

  slack_notify "[Build $BUILD_TIMESTAMP] Deploy complete. web/$WEB_BRANCH and server/$SERVER_BRANCH are live on $UPCHIEVE_ENV."
}

notify_failure () {
  local msg="${1}"
  if [[ -z "${msg}" ]]; then
    msg="Check deployment logs by with 'pm2 logs' on ${UPCHIEVE_ENV}."
  fi
  slack_notify "[Build $BUILD_TIMESTAMP] Deploy failed. ${msg}"
}

WEB_BRANCH="master"
SERVER_BRANCH="master"
BUILD_USER="${USER}"

while getopts 'w:s:u:h' flag; do
  case "${flag}" in
    w) WEB_BRANCH="${OPTARG}";;
    s) SERVER_BRANCH="${OPTARG}";;
    u) BUILD_USER="${OPTARG}";;
    h) usage && exit 2;;
    *) usage && exit 1;;
  esac
done

deploy_repos || notify_failure
